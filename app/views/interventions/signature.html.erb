 <h4>Please let the manager sign if the job is done!</h4>


 <%= simple_form_for(@workorder, as: :signature, method: :post, url: signature_process_intervention_path(@workorder)) do |f| %>
              <!-- <div class="btn btn-primary photo-button"> -->
                <canvas id="signature-pad" class="signature-pad" width=400 height=200></canvas>

 <%= f.input :signature, as: :hidden %>
 <div class="container">
   <div class="row justify-content-around">
      <button  class="btn col-4" id="clear">Clear</button>
  <button id="buttonFile" class="btn btn-primary col-4"> submit </button>
                <% end %>
    </div>
 </div>

 <!-- <div class="container">
  <div class="row">
    <div class="col-6 col-sm-4">
      <button  class="btn btn-primary btn-block" id="save">Save</button>
    </div> -->
    <!-- <div class="col-6 col-sm-4"> -->
<!-- </div> -->


<script>
  document.getElementById('buttonFile').addEventListener('click', function(e){
    e.preventDefault();
      var canvas = document.getElementById('signature-pad');


    // Copy the image contents to the canvas
    var ctx = canvas.getContext("2d");
      document.getElementById('signature_signature').value = canvas.toDataURL();
    // Get the data-URL formatted image
    // Firefox supports PNG and JPEG. You could check img.src to guess the
    // original format, but be aware the using "image/jpg" will re-encode the image.
//   var signaturePad = new SignaturePad(canvas);

// var value = signaturePad.toDataURL();
   setTimeout(function(){ document.getElementById("edit_signature").submit()})
     });

  var canvas = document.querySelector("canvas");

  var signaturePad = new SignaturePad(canvas);

// Returns signature image as data URL (see https://mdn.io/todataurl for the list of possible parameters)
signaturePad.toDataURL(); // save image as PNG
signaturePad.toDataURL("image/jpeg"); // save image as JPEG
signaturePad.toDataURL("image/svg+xml"); // save image as SVG

// Draws signature image from data URL.
// NOTE: This method does not populate internal data structure that represents drawn signature. Thus, after using #fromDataURL, #toData won't work properly.

// Returns signature image as an array of point groups
const data = signaturePad.toData();

// Draws signature image from an array of point groups
signaturePad.fromData(data);

// Clears the canvas
signaturePad.clear();

// Returns true if canvas is empty, otherwise returns false
signaturePad.isEmpty();

// Unbinds all event handlers
signaturePad.off();

// Rebinds all event handlers
signaturePad.on();

        // document.getElementById('signature_signature').value = signaturePad.toDataURL();

document.getElementById('clear').addEventListener('click', function () {
  signaturePad.clear();
});


</script>
